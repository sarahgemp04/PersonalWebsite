{
  "projects": [
    {
      "name": "itinerarMe",
      "desc": "This iOS application aims to defeat the questions: 'Where should we go to eat? What should we do today?', by feeding you high-rated options according to Google Places. You swipe. We create.",
      "bullets": [
        "Members: Daniel Ku, Vicky Tang, Timothy Mak, Me",
        "Developed during Codepath University iOS Bootcamp. Final Group project to a course where students and TA's grinded out 10 apps in a Semester time-period.",
        "Allows users to login via Facebook or Sign up utilizing Firebase for our backend database.",
        "Users can 'swipe right', or 'swipe left' with implemented animations on gesture recognition",
        "Users offered selections pulled straight from Google Places API that fit their initial filters.",
        "User can then chronologically order their chosen restaurants/activities in a clean and navigable interface, and save to 'their itineraries.'"
      ],
      "year": "April 2017",
      "technologies": [
        "Swift","Xcode","Git", "Google Places API", "Firebase", "OAuth", "CocoaPods"
      ],
      "media": [
        "img/projects/ItinerarMeDemo.gif","img/projects/ItinerarMe2.png", "img/projects/ItinerarMeDemo2.gif", "img/projects/ItinerarMe3.png", "img/projects/ItinerarMeDemo3.gif"
      ],
      "link": "https://bitbucket.org/itinerarme/itinerarme/overview"
    },
    {
      "name": "Fun with Graphs- Connecting Actors and finding 'Communities'",
      "desc": "A lengthy project boasting use of countless Data Structures, fancy and FAST algorithms, and fun with Actors connecting with other actors. Ever wonder how many movies apart one actor is to another? Like Johnny Depp and 50 Cent? Johnny Depp was in Pirates of the Carribean with Keira Knightly, who was in a movie with whoever, who was in a movie with so and so, who was in a movie with 50 Cent. And so on..",
      "bullets": ["Partner: Allison Reiss",
        "A project split into 2 parts: Finding connections between Actors/Actresses based on movies in which they appeared and links to others from said movie, and an extension - finding 'communities,' or groupings, between datasets.",
        "Finding Connections between actors from a dataset containing 50,000+ entries was implemented in 2 ways: Graph Implementation (weighted and unweighted) and a Disjoint Set Implementation. More information can be found in report found in link.",
        "Sample Input and Output is shown in sample pictures above, connections on a dataset of 50,000+ can be found in seconds, using Hash Maps, Priority Queues, and Fast Search Algorithms such as Dijkstra's and BFS for our Graph, and similar data structures along with Path Compression and Union by Size for our Disjoint Set. An explanation of our implementation is found in Report.",
        "Finding Communities between pairs of inputs was a challenge. Found online datasets for Social Network type data of 200,000+ pair entries. Loaded all entries into an undirected graph using similar implementation to Actor Connections. 'Communities' were then found based on how connected each individual node is to others- Similar to Facebook groups of friends who have many mutual friends.",
        "Calculated 'Betweenness' of ALL edges in graph. (A lot of edges..): Run BFS on ALL nodes to get to every node in graph. The greater number of times an edge is traveled to get to other edges, the higher its betweenness. Intuitively this means this edge is a sort of bridge between nearby groups."
      ],
      "year": "May 2017",
      "technologies": [
        "C++", "GDB", "Valgrind", "Vim","UNIX", "Data Structures Knowledge"
      ],
      "media": [
        "img/projects/betweenness.png", "img/projects/graphData1.png", "img/projects/graphData2.png",
        "img/projects/graphData3.png", "img/projects/graphInput.png", "img/projects/graphOutput.png"
      ],
      "link": "GraphsReport.pdf"
    },
    {
      "name": "Twitter App",
      "desc": "A personal Twitter App made with Oauth and online Twitter API. Can view other's or your own account, timeline, and favorite and retweet tweets. Made in a 2 week span.",
      "bullets": [
        "Developed during Codepath University iOS Bootcamp. 2 Parts Project. 2 Weeks.",
        "User is persisted upon app restarts",
        "Tweet Details Page: User can tap on a tweet to view it, with controls to retweet, favorite, and reply.",
        "Profile page:Contains the user header iamge. Contains a section with the users basic stats: # tweets, # following, # followers",
        "Home Timeline: Tapping on a user image brings up that user's profile page",
        "Compose Page: User can compose a new tweet by tapping on a compose button. Posts to their own actual account!"
        ] ,
      "year": "February 2017",
      "technologies": [
        "Swift","Twitter API","Xcode", "Git"
      ],
      "media": [
        "img/projects/Twitter.gif"
      ],
      "link": "https://github.com/sarahgemp04/CPTwitter"
    },
    {
      "name": "Huffman Encoding Tree",
      "desc": "UCSD CSE 100- Advanced Data Structures Assignment. Allowed me to compress (in roughly 5 minutes), and uncompress (less than that) my 1GB folder of Coachella Sets, 100% untarnished using Huffman Encoding to maximize efficiency of character encodings.",
      "bullets": [
        "Coding Partner: Allison Reiss",
        "Program developed in C++, utilizing Buffers, Bit input and output streams, and multiple data structures that greatly increased speed.",
        "An overview explanation and example of how to build such a marvelous data structure, the Huffman Tree, is shown in link above.",
        "The encoding structure consists of two main parts: The header, and the value. The header describes the components of the original file, or in our case the structure of the tree that encodes characters.",
        "The second part, contains the original components of the file, but encoded. Where a 32 bit ASCII character can now be expressed in as little as 1 bit (Best case).",
        "Created multiple test cases in each developmental phase."
      ],
      "year": "May 2017",
      "technologies": [
        "C++","Vim","GDB","Valgrind","Git", "UNIX Command tools"
      ],
      "media": [
        "img/projects/huffman1.png", "img/projects/huffman2.png"
      ],
      "link": "HuffmanCheckpoint.pdf"
    },
    {
      "name": "TBD-Total Body Development",
      "desc": "A group project for a Human Computer Interaction, CSE class. We made a 'Learn how to fitness app,' while learning and implementing the critical phases in testing, and creating a human-usable and enjoyable web application. ",
      "bullets": [
        "Members: Sanika Moharana, Thomas Loh, Lam Pham, Me",
        "Over the span of one quarter at UCSD, 10 weeks, we went through the design process, analyzed heuristics with both User testing, and our own testing, performed A/B testing, and rigorously designed/redesigned our app to meet its final product.",
        "Data was streamed through local JSON files due to time constraint and class policy, and routing implemented using Express.",
        "Front End developed using classic CSS and Bootstrap.",
        "Main framework used was NodeJS- Provided speed and efficient implementation.",
        "View on Github: https://github.com/sarahgemp04/TBDintroHCI"
      ],
      "year": "December 2016",
      "technologies": [
        "NodeJS","Express","HTML", "CSS", "Handlebars", "Bootstrap"
      ],
      "media": [
        "img/projects/TBD1.JPG", "img/projects/TBD2.JPG",
        "img/projects/TBD3.JPG"

      ],
      "link": "https://a10-totalbodydevelopment.herokuapp.com/"
    },
    {
      "name": "Feaux Instagram",
      "desc": "Built 'Instagram' from Ground Up using Heroku's MongoDB Database, Post and Get functionality, and various CocoaPods and XCode tools.",
      "bullets": ["User can sign up to create a new account using Parse authentication. Can also Log in or Log out.",
        "The current signed in user is persisted across app restarts",
        "User can take a photo, add a caption, and post it to 'Instagram' and see the last 20 posts on their feed with username and time created shown.",
        "User can favorite/de-favorite a post, and 'like' count is incremented/decremented.",
        " User can pull to refresh once a post is made to view the new insta post."
      ],
      "year": "March 2017",
      "technologies": [
        "Swift","Xcode","MongoDB", "Heroku", "Parse"
      ],
      "media": [
        "img/projects/Instagram.gif"
      ],
      "link": "https://github.com/sarahgemp04/MyInstagram"
    },
    {
      "name": "This Website",
      "desc": "A from-scratch Angular JS Application utilizing directives, controllers and services, and ease of routing with this quick and efficient Framework. Wanted to give myself experience with Angular to learn of its simplicity and functionality.",
      "bullets": [
        "Worked on occasionally, 10 Hours total (roughly).",
        "Utilize Angular's abstraction, directives, templating, and Data Binding to reduce code size, and routing to also reduce code size and make the site more functional and easily navigable.",
        "Bootstrap modifications and use throughout the pages. Bootstrap provides simple and resonsive grid design, and a clean mockup that can be customized with additional CSS as desired."
      ],
      "year": "August 2017",
      "technologies": [
        "AngularJS", "HTML","CSS","Bootstrap", "Git", "JSON Data", "AngularRouting", "JavaScript", "JQuery"
      ],
      "media": [
        ""
      ],
      "link": "https://github.com/sarahgemp04/MyInstagram"
    }
  ]
}
